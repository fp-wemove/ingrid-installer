<project name="Installer Utils Script" basedir=".">

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <!--

    ***************************************************************************************
    * MACROS
    ***************************************************************************************

    -->

    <macrodef name="patchFile">
        <attribute name="patchFile" description="File containing the patch."/>
        <attribute name="originalFile" description="File to apply the patch to."/>
        <sequential>
            <var name="TODAY" unset="true"/>
            <var name="patchErrorCode" unset="true"/>
            <tstamp>
                <format property="TODAY" pattern="yyyyMMdd-hhmmss.S" locale="de"/>
            </tstamp>
            <copy file="@{originalFile}" tofile="@{originalFile}.${TODAY}" overwrite="true" />
            <if>
                <os family="unix" />
                <then>
                    <!-- convert dest and patch file to linux format -->
                    <exec executable="tr">
                        <arg line="-d '\r'" />
                        <redirector input="@{patchFile}" output="@{patchFile}.converted" />
                    </exec>
                    <exec executable="tr">
                        <arg line="-d '\r'" />
                        <redirector input="@{originalFile}.${TODAY}" output="@{originalFile}" />
                    </exec>
                    <exec executable="patch" resultproperty="patchErrorCode">
                        <arg line="-u -i @{patchFile}.converted @{originalFile}" />
                    </exec>
                </then>
            </if>

            <echo message="Patching file '@{originalFile}' with patch '@{patchFile}'." />
            
            <exec dir="." executable="cmd.exe" osfamily="Windows" output="output.log" resultproperty="patchErrorCode">
                <arg line="/c patch -u -i @{patchFile} @{originalFile}"/>
            </exec>
            
            <echo>patchErrorCode: ${patchErrorCode}</echo>

            <if>
                <not>
                    <equals arg1="${patchErrorCode}" arg2="0"/>
                </not>
                <then>
                    <copy file="@{originalFile}.rej" tofile="@{originalFile}.rej.${TODAY}" overwrite="true" />
                    <echo>
*****************************************************
* PATCH-ERROR: Please check file: @{originalFile}.rej.${TODAY}
*****************************************************
                    </echo>
                    <var name="PatchErrors" value="${PatchErrors}, @{originalFile}.rej.${TODAY}" />
                </then>
            </if>
        </sequential>
    </macrodef>

    <scriptdef name="compareVersion" language="javascript">
        <attribute name="value1" />
        <attribute name="value2" />
        <attribute name="prop" />
        <![CDATA[
                var version = attributes.get('value1')+"";
                var tVersion = attributes.get('value2')+"";
                var property = attributes.get('prop')+"";
                var versionSplitted = version.split(".");
                var tVersionSplitted = tVersion.split('.');
                var determined = false;
                for (var i=0; i<versionSplitted.length; i++) {
                    var intVersion = parseInt(versionSplitted[i]);
                    var intTVersion = parseInt(tVersionSplitted[i]);
                    if (intVersion < intTVersion) {
                        project.setProperty(property, -1);
                        determined = true;
                        break;
                    } else if (intVersion > intTVersion) {
                        project.setProperty(property, +1);
                        determined = true;
                        break;
                    }
                }
                if (!determined)
                    project.setProperty(property, 0);
            ]]>
    </scriptdef>

    <scriptdef name="msec" language="javascript">
        <attribute name="property"/>
        <element name="fileset" type="fileset"/>
        <![CDATA[
            project.setNewProperty(attributes.get("property"), (new java.util.Date()).getTime()
    );
        ]]>
    </scriptdef>
    
    <!--

    ***************************************************************************************
    * ANTINSTALLER POST-DISPLAY-TARGETS
    ***************************************************************************************

    -->

    <target name="antinstaller-determineVersion">
        <fileset dir="${installDir}/${libraryDir}" id="componentLibrary" includes="${libraryIdent}*.jar" />

        <antinstaller-log message="File: ${toString:componentLibrary}" />

        <condition property="isJar">
            <matches string="${toString:componentLibrary}" pattern=".jar$"/>
        </condition>

        <!-- <propertyregex 
            property="oldVersion" 
            input="${toString:componentLibrary}" 
            regexp=".*${libraryIdent}(.*)\.jar"
            select="\1" /> -->

        <var name="zip.Implementation-Version" unset="true"/>
        <if>
            <isset property="isJar" />
            <then>
                <loadproperties prefix="zip">
                    <zipentry zipfile="${installDir}/${libraryDir}/${toString:componentLibrary}" name="META-INF/MANIFEST.MF"/>
                </loadproperties>
            </then>
            <else>
                <property file="${installDir}/${libraryDir}/${libraryIdent}" prefix="zip"/>
            </else>
        </if>
        <property name="oldVersion" value="${zip.Implementation-Version}" />
        <antinstaller-log message="Version installed: ${oldVersion}" />

        <compareVersion value1="${oldVersion}" value2="${minSupportedVersion}" prop="myResult"/>
        
        <if>
            <equals arg1="${myResult}" arg2="-1" />
            <then>
                <property name="unsupportedVersion" value="true"/>
                <antinstaller-message message="ERROR: Version not supported for update!" />
                <fail if="unsupportedVersion">Version not supported for update</fail>
            </then>
        </if>        

        <antinstaller-log message="versionsWithConfigurations: '${versionsWithConfigurations}'" />
        <for list="${versionsWithConfigurations}" param="confVersion">
            <sequential>
                <compareVersion value1="@{confVersion}" value2="${oldVersion}" prop="compResult"/>
                <antinstaller-log message="compared @{confVersion} with ${oldVersion}: ${compResult}"/>
                <if> <!-- versionWithConfigurations >= oldVersion -->
                    <not>            
                        <equals arg1="${compResult}" arg2="-1" />
                    </not>
                    <then>
                        <antinstaller-log message="add 'NeedsConfiguration@{confVersion}' to installer" />
                        <antinstaller-property name="NeedsConfiguration@{confVersion}" value="true" />
                    </then>
                </if>
            </sequential>
        </for>

        <antinstaller-property name="oldVersion" value="${oldVersion}" />

        <!-- CHECK FOR PATCH COMMAND ON UNIX -->
        <exec osfamily="unix" executable="patch" failifexecutionfails="false" resultproperty="patchErrorCode">
            <arg value="--version" />
        </exec>
        <if>
            <and>
                <os family="unix" />
                <not>
                    <equals arg1="${patchErrorCode}" arg2="0" />
                </not>
            </and>
            <then>
                <antinstaller-message message="Patch-Command not found!" />
                <antinstaller-property name="patchNotFound" value="true" />
            </then>
        </if>
    </target>

    <target name="checkPreconditionsForUpdate">
        <fail if="unsupportedVersion">The version ${oldVersion} is not supported for update! Please do a new installation.</fail>
        <fail unless="oldVersion">The previous version could not be determined!</fail>
        <fail if="patchNotFound">The patch command was not found on the system!</fail>
    </target>

    <target name="showPatchErrors">
        <if>
            <isset property="PatchErrors" />
            <then>
                <echo>
*********************************************
*********************************************
* THERE WERE PATCH ERRORS:
* Please look at: ${PatchErrors}
*********************************************
*********************************************
                </echo>
            </then>
        </if>
    </target>

    <target name="antinstaller-showResult">
        <antinstaller-message message="OK! :)" />
    </target>
</project>